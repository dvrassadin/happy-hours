openapi: 3.0.3
info:
  title: Happy Hours
  version: 1.0.0
  description: Happy Hours API
paths:
  /api/v1/beverage/beverages/:
    get:
      operationId: v1_beverage_beverages_list
      description: |-
        Beverage ViewSet that handles creating, retrieving, updating, and deleting beverage items.

        ### Validation:
        - The `price` field must be a non-negative number.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Beverages
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBeverageList'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - id: 1
                      name: Cola
                      price: 2.5
                      description: Refreshing carbonated soft drink.
                      availability_status: true
                      category: Soft Drinks
                      establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBeverageList'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - id: 1
                      name: Cola
                      price: 2.5
                      description: Refreshing carbonated soft drink.
                      availability_status: true
                      category: Soft Drinks
                      establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageCreationError:
                  value:
                    price:
                    - Ensure this value is greater than or equal to 0.01.
                  summary: Beverage Creation Error
                  description: Error during the creation of a beverage due to invalid
                    data
          description: ''
    post:
      operationId: v1_beverage_beverages_create
      description: |-
        Beverage ViewSet that handles creating, retrieving, updating, and deleting beverage items.

        ### Validation:
        - The `price` field must be a non-negative number.
      tags:
      - Beverages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beverage'
            examples:
              CreateBeverageSuccess:
                value:
                  name: Cola
                  price: 2.5
                  description: Refreshing carbonated soft drink.
                  availability_status: true
                  category: 1
                  establishment: 1
                summary: Create Beverage Success
                description: Successful creation of a beverage
              BeverageUpdateSuccess:
                value:
                  id: 1
                  name: Cola
                  price: 3.0
                  description: Extra refreshing carbonated soft drink.
                  availability_status: true
                  category: 1
                  establishment: 1
                summary: Beverage Update Success
                description: Successful update of a beverage
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageCreationError:
                  value:
                    price:
                    - Ensure this value is greater than or equal to 0.01.
                  summary: Beverage Creation Error
                  description: Error during the creation of a beverage due to invalid
                    data
          description: ''
  /api/v1/beverage/beverages/{id}/:
    get:
      operationId: v1_beverage_beverages_retrieve
      description: |-
        Beverage ViewSet that handles creating, retrieving, updating, and deleting beverage items.

        ### Validation:
        - The `price` field must be a non-negative number.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Beverage.
        required: true
      tags:
      - Beverages
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageCreationError:
                  value:
                    price:
                    - Ensure this value is greater than or equal to 0.01.
                  summary: Beverage Creation Error
                  description: Error during the creation of a beverage due to invalid
                    data
          description: ''
    put:
      operationId: v1_beverage_beverages_update
      description: |-
        Beverage ViewSet that handles creating, retrieving, updating, and deleting beverage items.

        ### Validation:
        - The `price` field must be a non-negative number.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Beverage.
        required: true
      tags:
      - Beverages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beverage'
            examples:
              CreateBeverageSuccess:
                value:
                  name: Cola
                  price: 2.5
                  description: Refreshing carbonated soft drink.
                  availability_status: true
                  category: 1
                  establishment: 1
                summary: Create Beverage Success
                description: Successful creation of a beverage
              BeverageUpdateSuccess:
                value:
                  id: 1
                  name: Cola
                  price: 3.0
                  description: Extra refreshing carbonated soft drink.
                  availability_status: true
                  category: 1
                  establishment: 1
                summary: Beverage Update Success
                description: Successful update of a beverage
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageCreationError:
                  value:
                    price:
                    - Ensure this value is greater than or equal to 0.01.
                  summary: Beverage Creation Error
                  description: Error during the creation of a beverage due to invalid
                    data
          description: ''
    patch:
      operationId: v1_beverage_beverages_partial_update
      description: |-
        Beverage ViewSet that handles creating, retrieving, updating, and deleting beverage items.

        ### Validation:
        - The `price` field must be a non-negative number.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Beverage.
        required: true
      tags:
      - Beverages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBeverage'
            examples:
              CreateBeverageSuccess:
                value:
                  name: Cola
                  price: 2.5
                  description: Refreshing carbonated soft drink.
                  availability_status: true
                  category: 1
                  establishment: 1
                summary: Create Beverage Success
                description: Successful creation of a beverage
              BeverageUpdateSuccess:
                value:
                  id: 1
                  name: Cola
                  price: 3.0
                  description: Extra refreshing carbonated soft drink.
                  availability_status: true
                  category: 1
                  establishment: 1
                summary: Beverage Update Success
                description: Successful update of a beverage
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageCreationError:
                  value:
                    price:
                    - Ensure this value is greater than or equal to 0.01.
                  summary: Beverage Creation Error
                  description: Error during the creation of a beverage due to invalid
                    data
          description: ''
    delete:
      operationId: v1_beverage_beverages_destroy
      description: |-
        Beverage ViewSet that handles creating, retrieving, updating, and deleting beverage items.

        ### Validation:
        - The `price` field must be a non-negative number.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Beverage.
        required: true
      tags:
      - Beverages
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageRetrievalSuccess:
                  value:
                    id: 1
                    name: Cola
                    price: 2.5
                    description: Refreshing carbonated soft drink.
                    availability_status: true
                    category: Soft Drinks
                    establishment: Joe's Bar
                  summary: Beverage Retrieval Success
                  description: Successful retrieval of a beverage
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beverage'
              examples:
                BeverageCreationError:
                  value:
                    price:
                    - Ensure this value is greater than or equal to 0.01.
                  summary: Beverage Creation Error
                  description: Error during the creation of a beverage due to invalid
                    data
          description: ''
  /api/v1/beverage/categories/:
    get:
      operationId: v1_beverage_categories_list
      description: |-
        Provides a set of CRUD operations for categories.

        Each category includes a hyperlink to the associated beverages

        ## Endpoints and Permissions
        - **List (GET /categories/)**: Retrieve all categories. Requires authentication.
        - **Retrieve (GET /categories/{id}/)**: Retrieve a specific category by its ID.
        Requires authentication.
        - **Create (POST /categories/)**: Create a new category.
         Requires user role admin
        - **Update (PUT/PATCH /categories/{id}/)**: Update an existing category  .
         Requires user role admin
        - **Delete (DELETE /categories/{id}/)**: Delete a category.
         Requires admin privileges.

        ## Related Fields
        - `beverages`: A list of URLs pointing to detailed views of beverages that belong to a category.
         This field is read-only.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: v1_beverage_categories_create
      description: |-
        Provides a set of CRUD operations for categories.

        Each category includes a hyperlink to the associated beverages

        ## Endpoints and Permissions
        - **List (GET /categories/)**: Retrieve all categories. Requires authentication.
        - **Retrieve (GET /categories/{id}/)**: Retrieve a specific category by its ID.
        Requires authentication.
        - **Create (POST /categories/)**: Create a new category.
         Requires user role admin
        - **Update (PUT/PATCH /categories/{id}/)**: Update an existing category  .
         Requires user role admin
        - **Delete (DELETE /categories/{id}/)**: Delete a category.
         Requires admin privileges.

        ## Related Fields
        - `beverages`: A list of URLs pointing to detailed views of beverages that belong to a category.
         This field is read-only.
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/v1/beverage/categories/{id}/:
    get:
      operationId: v1_beverage_categories_retrieve
      description: |-
        Provides a set of CRUD operations for categories.

        Each category includes a hyperlink to the associated beverages

        ## Endpoints and Permissions
        - **List (GET /categories/)**: Retrieve all categories. Requires authentication.
        - **Retrieve (GET /categories/{id}/)**: Retrieve a specific category by its ID.
        Requires authentication.
        - **Create (POST /categories/)**: Create a new category.
         Requires user role admin
        - **Update (PUT/PATCH /categories/{id}/)**: Update an existing category  .
         Requires user role admin
        - **Delete (DELETE /categories/{id}/)**: Delete a category.
         Requires admin privileges.

        ## Related Fields
        - `beverages`: A list of URLs pointing to detailed views of beverages that belong to a category.
         This field is read-only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Category.
        required: true
      tags:
      - Categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: v1_beverage_categories_update
      description: |-
        Provides a set of CRUD operations for categories.

        Each category includes a hyperlink to the associated beverages

        ## Endpoints and Permissions
        - **List (GET /categories/)**: Retrieve all categories. Requires authentication.
        - **Retrieve (GET /categories/{id}/)**: Retrieve a specific category by its ID.
        Requires authentication.
        - **Create (POST /categories/)**: Create a new category.
         Requires user role admin
        - **Update (PUT/PATCH /categories/{id}/)**: Update an existing category  .
         Requires user role admin
        - **Delete (DELETE /categories/{id}/)**: Delete a category.
         Requires admin privileges.

        ## Related Fields
        - `beverages`: A list of URLs pointing to detailed views of beverages that belong to a category.
         This field is read-only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Category.
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: v1_beverage_categories_partial_update
      description: |-
        Provides a set of CRUD operations for categories.

        Each category includes a hyperlink to the associated beverages

        ## Endpoints and Permissions
        - **List (GET /categories/)**: Retrieve all categories. Requires authentication.
        - **Retrieve (GET /categories/{id}/)**: Retrieve a specific category by its ID.
        Requires authentication.
        - **Create (POST /categories/)**: Create a new category.
         Requires user role admin
        - **Update (PUT/PATCH /categories/{id}/)**: Update an existing category  .
         Requires user role admin
        - **Delete (DELETE /categories/{id}/)**: Delete a category.
         Requires admin privileges.

        ## Related Fields
        - `beverages`: A list of URLs pointing to detailed views of beverages that belong to a category.
         This field is read-only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Category.
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: v1_beverage_categories_destroy
      description: |-
        Provides a set of CRUD operations for categories.

        Each category includes a hyperlink to the associated beverages

        ## Endpoints and Permissions
        - **List (GET /categories/)**: Retrieve all categories. Requires authentication.
        - **Retrieve (GET /categories/{id}/)**: Retrieve a specific category by its ID.
        Requires authentication.
        - **Create (POST /categories/)**: Create a new category.
         Requires user role admin
        - **Update (PUT/PATCH /categories/{id}/)**: Update an existing category  .
         Requires user role admin
        - **Delete (DELETE /categories/{id}/)**: Delete a category.
         Requires admin privileges.

        ## Related Fields
        - `beverages`: A list of URLs pointing to detailed views of beverages that belong to a category.
         This field is read-only.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Category.
        required: true
      tags:
      - Categories
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/order/client-orders/:
    get:
      operationId: v1_order_client_orders_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderHistoryList'
              examples:
                OrderHistoryRetrievalSuccess:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - - id: 1
                        order_date: '2024-04-30T17:00:00Z'
                        establishment_name: Joe's Bar
                        beverage_name: Cola
                        client_details: http://example.com/api/v1/users/1
                      - id: 2
                        order_date: '2024-04-29T15:00:00Z'
                        establishment_name: The Coffee Shop
                        beverage_name: Espresso
                        client_details: http://example.com/api/v1/users/1
                  summary: Order History Retrieval Success
                  description: Successful retrieval of order history for a client
          description: ''
  /api/v1/order/partner-orders/:
    get:
      operationId: v1_order_partner_orders_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderHistoryList'
              examples:
                OrderHistoryRetrievalSuccess:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - - id: 1
                        order_date: '2024-04-30T17:00:00Z'
                        establishment_name: Joe's Bar
                        beverage_name: Cola
                        client_details: http://example.com/api/v1/users/1
                      - id: 2
                        order_date: '2024-04-29T15:00:00Z'
                        establishment_name: The Coffee Shop
                        beverage_name: Espresso
                        client_details: http://example.com/api/v1/users/1
                  summary: Order History Retrieval Success
                  description: Successful retrieval of order history for a client
          description: ''
  /api/v1/order/place-order/:
    post:
      operationId: v1_order_place_order_create
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              CreateOrderSuccess:
                value:
                  beverage: 1
                summary: Create Order Success
                description: Successful creation of an order during happy hours
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                CreateOrderSuccess:
                  value:
                    beverage: 1
                    establishment: 1
                    client: 1
                    order_date: '2024-04-29T15:00:00Z'
                  summary: Create Order Success
                  description: Example of successfully creating an order during happy
                    hours
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                CreateOrderFailure-HappyHours:
                  value:
                    detail: You can only place an order during happy hours.
                  summary: Create Order Failure - Happy Hours
                  description: Failed attempt to create an order outside happy hours
                CreateOrderFailure-OrderFrequency:
                  value:
                    detail: You can only place one order per hour and one order per
                      establishment per day.
                  summary: Create Order Failure - Order Frequency
                  description: Failed attempt to create an order due to frequency
                    limit (one per hour/day)
          description: ''
  /api/v1/partner/establishment/{id}/:
    get:
      operationId: v1_partner_establishment_retrieve
      description: |-
        Manages the CRUD operations for establishments. Retrieve is open to all users,
        update and delete are
        restricted to admins and owners, ensuring operational security and owner control.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Establishments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Establishment'
              examples:
                EstablishmentRetrievalSuccess:
                  value:
                    id: 1
                    name: Joe's Bar
                    location: Downtown
                    description: Popular local bar with craft beers and live music.
                    phone_number: 123-456-7890
                    logo: http://example.com/media/establishment_logos/joesbar.jpg
                    address: 123 Main St, Anytown
                    happyhours_start: '17:00'
                    happyhours_end: '19:00'
                    owner: owner@example.com
                    qr_code:
                      id: 101
                      qr_code_image: http://example.com/media/qrcodes/joesbar_qr.jpg
                  summary: Establishment Retrieval Success
                  description: Successful retrieval of an establishment
                EstablishmentUpdateError:
                  value:
                    owner:
                    - You are not allowed to set the owner to another user.
                  summary: Establishment Update Error
                  description: Error during the update of an establishment due to
                    unauthorized access
          description: ''
    put:
      operationId: v1_partner_establishment_update
      description: |-
        Manages the CRUD operations for establishments. Retrieve is open to all users,
        update and delete are
        restricted to admins and owners, ensuring operational security and owner control.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Establishments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstablishmentCreateUpdate'
            examples:
              EstablishmentCreationSuccess:
                value:
                  id: 2
                  name: The New Place
                  location: Uptown
                  description: A new trendy spot for evening hangouts.
                  phone_number: 987-654-3210
                  logo: http://example.com/media/establishment_logos/newplace.jpg
                  address: 456 Side St, Othertown
                  happyhours_start: '18:00'
                  happyhours_end: '20:00'
                  owner: owner@example.com
                  qr_code:
                    id: 102
                    qr_code_image: http://example.com/media/qrcodes/newplace_qr.jpg
                summary: Establishment Creation Success
                description: Successful creation of an establishment
              EstablishmentUpdateSuccess:
                value:
                  id: 1
                  name: Joe's Bar Updated
                  location: Downtown
                  description: Now featuring a wide selection of imported beers.
                  phone_number: 123-456-7890
                  logo: http://example.com/media/establishment_logos/joesbar_updated.jpg
                  address: 123 Main St, Anytown
                  happyhours_start: '17:00'
                  happyhours_end: '21:00'
                  owner: owner@example.com
                  qr_code:
                    id: 101
                    qr_code_image: http://example.com/media/qrcodes/joesbar_updated_qr.jpg
                summary: Establishment Update Success
                description: Successful update of an establishment
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstablishmentCreateUpdate'
              examples:
                EstablishmentRetrievalSuccess:
                  value:
                    id: 1
                    name: Joe's Bar
                    location: Downtown
                    description: Popular local bar with craft beers and live music.
                    phone_number: 123-456-7890
                    logo: http://example.com/media/establishment_logos/joesbar.jpg
                    address: 123 Main St, Anytown
                    happyhours_start: '17:00'
                    happyhours_end: '19:00'
                    owner: owner@example.com
                    qr_code:
                      id: 101
                      qr_code_image: http://example.com/media/qrcodes/joesbar_qr.jpg
                  summary: Establishment Retrieval Success
                  description: Successful retrieval of an establishment
                EstablishmentUpdateError:
                  value:
                    owner:
                    - You are not allowed to set the owner to another user.
                  summary: Establishment Update Error
                  description: Error during the update of an establishment due to
                    unauthorized access
          description: ''
    patch:
      operationId: v1_partner_establishment_partial_update
      description: |-
        Manages the CRUD operations for establishments. Retrieve is open to all users,
        update and delete are
        restricted to admins and owners, ensuring operational security and owner control.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Establishments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEstablishmentCreateUpdate'
            examples:
              EstablishmentCreationSuccess:
                value:
                  id: 2
                  name: The New Place
                  location: Uptown
                  description: A new trendy spot for evening hangouts.
                  phone_number: 987-654-3210
                  logo: http://example.com/media/establishment_logos/newplace.jpg
                  address: 456 Side St, Othertown
                  happyhours_start: '18:00'
                  happyhours_end: '20:00'
                  owner: owner@example.com
                  qr_code:
                    id: 102
                    qr_code_image: http://example.com/media/qrcodes/newplace_qr.jpg
                summary: Establishment Creation Success
                description: Successful creation of an establishment
              EstablishmentUpdateSuccess:
                value:
                  id: 1
                  name: Joe's Bar Updated
                  location: Downtown
                  description: Now featuring a wide selection of imported beers.
                  phone_number: 123-456-7890
                  logo: http://example.com/media/establishment_logos/joesbar_updated.jpg
                  address: 123 Main St, Anytown
                  happyhours_start: '17:00'
                  happyhours_end: '21:00'
                  owner: owner@example.com
                  qr_code:
                    id: 101
                    qr_code_image: http://example.com/media/qrcodes/joesbar_updated_qr.jpg
                summary: Establishment Update Success
                description: Successful update of an establishment
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstablishmentCreateUpdate'
              examples:
                EstablishmentRetrievalSuccess:
                  value:
                    id: 1
                    name: Joe's Bar
                    location: Downtown
                    description: Popular local bar with craft beers and live music.
                    phone_number: 123-456-7890
                    logo: http://example.com/media/establishment_logos/joesbar.jpg
                    address: 123 Main St, Anytown
                    happyhours_start: '17:00'
                    happyhours_end: '19:00'
                    owner: owner@example.com
                    qr_code:
                      id: 101
                      qr_code_image: http://example.com/media/qrcodes/joesbar_qr.jpg
                  summary: Establishment Retrieval Success
                  description: Successful retrieval of an establishment
                EstablishmentUpdateError:
                  value:
                    owner:
                    - You are not allowed to set the owner to another user.
                  summary: Establishment Update Error
                  description: Error during the update of an establishment due to
                    unauthorized access
          description: ''
    delete:
      operationId: v1_partner_establishment_destroy
      description: |-
        Manages the CRUD operations for establishments. Retrieve is open to all users,
        update and delete are
        restricted to admins and owners, ensuring operational security and owner control.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Establishments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/partner/establishment/create/:
    post:
      operationId: v1_partner_establishment_create_create
      description: |-
        Creates a new establishment, restricted to partner users who can
         create up to their allowed limit.
        This view also handles the generation of a QR code for each new establishment,
         which is saved and linked
        to the establishment for easy access and identification.

        ### Fields:
        - `name`: The name of the establishment.
        - `location`: The geographic location of the establishment.
        - `description`: A brief description of the establishment.
        - `phone_number`: The contact phone number for the establishment.
        - `logo`: A URL to the logo image for the establishment.
        - `address`: The full address of the establishment.
        - `happyhours_start`: The start time for happy hours.
        - `happyhours_end`: The end time for happy hours.
        - `owner`: The id of the partner user.
        - `qr_code`: A URL to the QR code image for the establishment (read-only).

        ### Validation:
        - Ensures that the partner has not exceeded their limit of owned establishments.
        - Checks data integrity for phone numbers and locations.

        ### Permission:
        - Restricted to authenticated partner users only.

        ### Business Logic:
        - On successful creation, a QR code is generated and saved associated
        with the establishment.
        - The creation will fail with a `Permission Denied` error
        if the user has reached their limit of establishments.
      tags:
      - Establishments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstablishmentCreateUpdate'
            examples:
              EstablishmentCreationSuccess:
                value:
                  id: 2
                  name: The New Place
                  location: Uptown
                  description: A new trendy spot for evening hangouts.
                  phone_number: 987-654-3210
                  logo: http://example.com/media/establishment_logos/newplace.jpg
                  address: 456 Side St, Othertown
                  happyhours_start: '18:00'
                  happyhours_end: '20:00'
                  owner: owner@example.com
                  qr_code:
                    id: 102
                    qr_code_image: http://example.com/media/qrcodes/newplace_qr.jpg
                summary: Establishment Creation Success
                description: Successful creation of an establishment
              EstablishmentUpdateSuccess:
                value:
                  id: 1
                  name: Joe's Bar Updated
                  location: Downtown
                  description: Now featuring a wide selection of imported beers.
                  phone_number: 123-456-7890
                  logo: http://example.com/media/establishment_logos/joesbar_updated.jpg
                  address: 123 Main St, Anytown
                  happyhours_start: '17:00'
                  happyhours_end: '21:00'
                  owner: owner@example.com
                  qr_code:
                    id: 101
                    qr_code_image: http://example.com/media/qrcodes/joesbar_updated_qr.jpg
                summary: Establishment Update Success
                description: Successful update of an establishment
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstablishmentCreateUpdate'
              examples:
                EstablishmentRetrievalSuccess:
                  value:
                    id: 1
                    name: Joe's Bar
                    location: Downtown
                    description: Popular local bar with craft beers and live music.
                    phone_number: 123-456-7890
                    logo: http://example.com/media/establishment_logos/joesbar.jpg
                    address: 123 Main St, Anytown
                    happyhours_start: '17:00'
                    happyhours_end: '19:00'
                    owner: owner@example.com
                    qr_code:
                      id: 101
                      qr_code_image: http://example.com/media/qrcodes/joesbar_qr.jpg
                  summary: Establishment Retrieval Success
                  description: Successful retrieval of an establishment
                EstablishmentUpdateError:
                  value:
                    owner:
                    - You are not allowed to set the owner to another user.
                  summary: Establishment Update Error
                  description: Error during the update of an establishment due to
                    unauthorized access
          description: ''
  /api/v1/partner/establishment/list/:
    get:
      operationId: v1_partner_establishment_list_list
      description: |-
        Lists establishments based on user roles. This view is accessible to all
        authenticated users. Partners see only
        establishments they own.

        ### Access Control:
        - All authenticated users can access this view, but the listings are
        filtered by ownership for partners,
          showing only their own establishments.
        - Admins have the privilege to view all establishments across the platform

        ### Implementation Details:
        - The queryset dynamically adjusts based on the authenticated user's role,
        ensuring that users receive data
          that is relevant and appropriate to their permissions.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Establishments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEstablishmentList'
              examples:
                EstablishmentRetrievalSuccess:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - id: 1
                      name: Joe's Bar
                      location: Downtown
                      description: Popular local bar with craft beers and live music.
                      phone_number: 123-456-7890
                      logo: http://example.com/media/establishment_logos/joesbar.jpg
                      address: 123 Main St, Anytown
                      happyhours_start: '17:00'
                      happyhours_end: '19:00'
                      owner: owner@example.com
                      qr_code:
                        id: 101
                        qr_code_image: http://example.com/media/qrcodes/joesbar_qr.jpg
                  summary: Establishment Retrieval Success
                  description: Successful retrieval of an establishment
                EstablishmentUpdateError:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                    - owner:
                      - You are not allowed to set the owner to another user.
                  summary: Establishment Update Error
                  description: Error during the update of an establishment due to
                    unauthorized access
          description: ''
  /api/v1/partner/menu/{id}/:
    get:
      operationId: v1_partner_menu_retrieve
      description: |-
        Provides a detailed view of the menu for a specific establishment,
        accessible to all authenticated users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Establishments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
              examples:
                MenuRetrievalSuccess:
                  value:
                    id: 1
                    name: Joe's Bar
                    location: Downtown
                    description: Popular local bar with craft beers and live music.
                    phone_number: 123-456-7890
                    address: 123 Main St, Anytown
                    logo: http://example.com/media/establishment_logos/joesbar.jpg
                    happyhours_start: '17:00'
                    happyhours_end: '19:00'
                    beverages:
                    - id: 1
                      name: Cola
                      price: 2.5
                      description: Refreshing carbonated soft drink.
                      availability_status: true
                      category_name: Soft Drinks
                      establishment_name: Joe's Bar
                    - id: 2
                      name: Lemonade
                      price: 1.75
                      description: Freshly squeezed lemonade.
                      availability_status: true
                      category_name: Non-alcoholic
                      establishment_name: Joe's Bar
                  summary: Menu Retrieval Success
                  description: Successful retrieval of an establishment's menu including
                    beverages
          description: ''
  /api/v1/user/:
    get:
      operationId: v1_user_retrieve
      description: User viewset with Owner permission. Does not usr ID, takes user
        from request
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_user_update
      description: User viewset with Owner permission. Does not usr ID, takes user
        from request
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_user_partial_update
      description: User viewset with Owner permission. Does not usr ID, takes user
        from request
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: v1_user_destroy
      description: User viewset with Owner permission. Does not usr ID, takes user
        from request
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/block_user/:
    post:
      operationId: v1_user_block_user_create
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockUser'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockUser'
          description: ''
  /api/v1/user/client_list/:
    get:
      operationId: v1_user_client_list_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClientListList'
          description: ''
  /api/v1/user/client_register/:
    post:
      operationId: v1_user_client_register_create
      description: Individual Client Register View
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRegister'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegister'
          description: ''
  /api/v1/user/create_partner/:
    post:
      operationId: v1_user_create_partner_create
      description: Individual Partner Register View
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerCreate'
          description: ''
  /api/v1/user/logout/:
    post:
      operationId: v1_user_logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/v1/user/partner_list:
    get:
      operationId: v1_user_partner_list_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPartnerListList'
          description: ''
  /api/v1/user/password_change/:
    post:
      operationId: v1_user_password_change_create
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPasswordChange'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPasswordChange'
          description: ''
  /api/v1/user/password_forgot/:
    post:
      operationId: v1_user_password_forgot_create
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPasswordForgotPage'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPasswordForgotPage'
          description: ''
  /api/v1/user/password_reset/:
    post:
      operationId: v1_user_password_reset_create
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientPasswordReset'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPasswordReset'
          description: ''
  /api/v1/user/token/:
    post:
      operationId: v1_user_token_create
      description: Token Obtaining view
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtain'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/user/token/admin/:
    post:
      operationId: v1_user_token_admin_create
      description: Individual login for Admin and superuser
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLogin'
          description: ''
  /api/v1/user/token/refresh/:
    post:
      operationId: v1_user_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    AdminLogin:
      type: object
      description: Token Obtaining Serializer for admin, superuser
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Beverage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        description:
          type: string
        availability_status:
          type: boolean
        establishment:
          type: integer
        category:
          type: integer
      required:
      - category
      - description
      - establishment
      - id
      - name
      - price
    BlockUser:
      type: object
      description: Serializer for blocking users
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        beverages:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
      required:
      - beverages
      - id
      - name
    ClientList:
      type: object
      description: Only for client list
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          nullable: true
          maxLength: 255
        date_of_birth:
          type: string
          format: date
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
        is_blocked:
          type: boolean
      required:
      - email
      - id
    ClientPasswordChange:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
      required:
      - email
      - password
      - password_confirm
    ClientPasswordForgotPage:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    ClientPasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
        reset_code:
          type: string
          maxLength: 4
      required:
      - email
      - reset_code
    ClientRegister:
      type: object
      description: Individual register view for client user
      properties:
        id:
          type: integer
          readOnly: true
          nullable: true
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        date_of_birth:
          type: string
          format: date
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
        tokens:
          type: object
          properties:
            access:
              type: string
              readOnly: true
            refresh:
              type: string
      required:
      - access
      - refresh
      required:
      - email
      - id
      - password
      - password_confirm
    Establishment:
      type: object
      description: Main serializer for Establishment model
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        location:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        logo:
          type: string
          format: uri
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 255
        happyhours_start:
          type: string
          format: time
          nullable: true
        happyhours_end:
          type: string
          format: time
          nullable: true
        owner:
          type: integer
          nullable: true
        qr_code:
          allOf:
          - $ref: '#/components/schemas/QRCode'
          readOnly: true
      required:
      - id
      - name
      - qr_code
    EstablishmentCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        location:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        logo:
          type: string
          format: uri
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 255
        happyhours_start:
          type: string
          format: time
          nullable: true
        happyhours_end:
          type: string
          format: time
          nullable: true
        owner:
          type: integer
          nullable: true
        qr_code:
          allOf:
          - $ref: '#/components/schemas/QRCode'
          readOnly: true
      required:
      - id
      - name
      - qr_code
    Menu:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        location:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        address:
          type: string
          nullable: true
          maxLength: 255
        logo:
          type: string
          format: uri
          nullable: true
        happyhours_start:
          type: string
          format: time
          nullable: true
        happyhours_end:
          type: string
          format: time
          nullable: true
        beverages:
          type: array
          items:
            $ref: '#/components/schemas/Beverage'
          readOnly: true
      required:
      - beverages
      - id
      - name
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        establishment:
          type: integer
          readOnly: true
        beverage:
          type: integer
        client:
          type: integer
          readOnly: true
        order_date:
          type: string
          format: date-time
          readOnly: true
      required:
      - beverage
      - client
      - establishment
      - id
      - order_date
    OrderHistory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order_date:
          type: string
          format: date-time
          readOnly: true
        establishment_name:
          type: string
          readOnly: true
        beverage_name:
          type: string
          readOnly: true
        client_details:
          type: string
          format: uri
          readOnly: true
      required:
      - beverage_name
      - client_details
      - establishment_name
      - id
      - order_date
    PaginatedBeverageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Beverage'
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedClientListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ClientList'
    PaginatedEstablishmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Establishment'
    PaginatedOrderHistoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderHistory'
    PaginatedPartnerListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/PartnerList'
    PartnerCreate:
      type: object
      description: Individual create view for partner user
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
        name:
          type: string
          nullable: true
          maxLength: 255
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
        max_establishments:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum number of establishments this user can own
      required:
      - email
      - id
      - password
      - password_confirm
    PartnerList:
      type: object
      description: Only for partner list
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          nullable: true
          maxLength: 255
        max_establishments:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum number of establishments this user can own
        is_blocked:
          type: boolean
      required:
      - email
      - id
    PatchedBeverage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        description:
          type: string
        availability_status:
          type: boolean
        establishment:
          type: integer
        category:
          type: integer
    PatchedCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        beverages:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
    PatchedEstablishmentCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        location:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        logo:
          type: string
          format: uri
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 255
        happyhours_start:
          type: string
          format: time
          nullable: true
        happyhours_end:
          type: string
          format: time
          nullable: true
        owner:
          type: integer
          nullable: true
        qr_code:
          allOf:
          - $ref: '#/components/schemas/QRCode'
          readOnly: true
    PatchedUser:
      type: object
      description: Basic user serializer
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        date_of_birth:
          type: string
          format: date
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
    QRCode:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        qr_code_image:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - qr_code_image
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
      - refresh
    TokenObtain:
      type: object
      description: Token Obtaining Serializer
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      description: Basic user serializer
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        date_of_birth:
          type: string
          format: date
          nullable: true
        avatar:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - id
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://16.170.203.161
  description: Production server
